
Yukarıda verilen matris üzerinde ilkköşegen 1-6-11-16 doğrultusundadır ve ilkköşegen toplamı 1 + 6 + 11 + 16 = 34 olarak bulunur

Sizden istenilen iç içe listeler halinde verilen girdi için trace isimli bir fonksiyon yazmanız ve ekrana ilkköşegen toplamını yazdırmanız.

Örnek: Yukarıda verilen matris, iç içe listeler kullanarak [[1, 15, 14, 4], [12, 6, 7, 9], [8, 10, 11, 5], [13, 3, 2, 16]] şeklinde gösterilir ve ilkköşegen toplamı olarak ekrana 34 yazdırılmalıdır.

def trace(liste):
    sums = 0
    for i in range(len(liste)):
        sums += liste[i][i]
    print(sums)
    
trace( [[1, 15, 14, 4], [12, 6, 7, 9], [8, 10, 11, 5], [13, 3, 2, 16]])

Sihirli kare: iç içe listeler halinde verilen, 2 boyutlu girdinizin her sırasının, her kolonunun ve her iki köşegeninin toplamları birbirine eşit ise bu kareye sihirli kare diyoruz.

1	15	14	4
12	6	7	9
8	10	11	5
13	3	2	16
Yukarıda verilen matris üzerinde satır, sütun ve iki köşegen toplamlarına bakalım:

1. Satır : 1 + 15 + 14 + 4 = 34
2. Satır : 12 + 6 + 7 + 9 = 34
3. Satır : 8 + 10 + 11 + 5 = 34
4. Satır : 13 + 3 + 2 + 16 = 34

1. Kolon: 1 + 12 + 8 + 13 = 34
2. Kolon: 15 + 6 + 10 + 3 = 34
3. Kolon: 14 + 7 + 11 + 2 = 34
4. Kolon: 4 + 9 + 5 + 16 = 34

1. Köşegen (sol üstten, sağ alta) : 1 + 6 + 11 + 16 = 34
2. Köşegen (sol alttan, sağ üste) : 13 + 10 + 7 + 4 = 34

Gördüğünüz üzere bütün toplamlar birbirine eşit olduğu için matrisimiz bir sihirli karedir.

Yazacağınız isSihirli fonksiyonu, girdi olarak iç içe listeler halinde tanımlanmış bir liste almalıdır, eğer girdi sihirli kare ise ekrana 0, değil ise 1 bastırmalıdır.

Örnek: isSihirli([[1, 15, 14, 4], [12, 6, 7, 9], [8, 10, 11, 5], [13, 3, 2, 16]]) ekrana 0 yazdırmalıdır.

def isSihirli(liste):
    rowSums = [0 for i in range(len(liste))]
    colSums = [0 for i in range(len(liste))]
    diagonSums = [0] * 2
    isMagic = 0
    
    for i in range(len(liste)):
        for j in range(len(liste)):
            rowSums[i] += liste[i][j]
            colSums[j] += liste[j][i]

    for i in range(len(liste)):
        diagonSums[0] += liste[i][i]
 
    for i in range(len(liste)):
        diagonSums[1] += liste[i][len(liste)-1-i]
    
    for i in range(len(rowSums)):
        for j in range(len(colSums)):
            if rowSums[i] != rowSums[j] or colSums[i] != colSums[j] or rowSums[i] != colSums[j] or diagonSums[0] != diagonSums[1]:
                isMagic = 1
 
    for i in range(len(liste)):
        diagonSums[1] += liste[i][len(liste)-1-i]

    for i in range(len(rowSums)):
        for j in range(len(colSums)):
            if rowSums[i] == rowSums[j] and colSums[i] == colSums[j] and rowSums[i] == colSums[j] and diagonSums[0] == diagonSums[1]:
                isMagic = 0
    print(isMagic)
	
	
	Bu soruda sizden istenilen girdi olarak 2 tane liste alan ve sonuç olarak ekrana liste yazan maksList fonksiyonunu yazmanız. maksList fonksiyonu almış olduğu iki listenin elemanlarını indekslerini artırarak kontrol edip, maksimum elemanlardan oluşan yeni listeyi döndürecektir.

Girdi olarak [4, 5, 6] ve [1, 2, 6] listelerini maksList fonksiyonuna gönderdiğimizde fonksiyonumuz sırasıyla 4 ile 1 elemanlarını, 5 ile 2 elemanlarını ve 6 ile 6 elemanlarını karşılaştırıp maksimum elemanlardan oluşan [4, 5, 6] listesini ekrana bastıracaktır.
	
def maksList(list1, list2):
    result = []
    
    for i in range(len(list1)):
        if list1[i] >= list2[i]:
            result.append(list1[i])
        else:
            result.append(list2[i])
    print(result)
	
Bu soruda yığıt veri yapısını kullanarak size verilen karakter dizisinin palindrom [bknz] olup olmadığını kontrol etmenizi istiyoruz. Yığıt yapısının çalışma mantığını sizinle paylaşmıştık, eğer Python listelerini kullanmak isterseniz, yığıta eleman eklemeyi, ve yığıttan eleman çıkarmayı sıfırıncı indeksten yapmalısınız.

Örnek olarak [1, 2, 3, 4, 5] bizim yığıt yapımız için kullandığımız liste ise eleman çıkardığımız zaman [2, 3, 4, 5] listesini, orijinal listeye 6 elemanını eklediğimiz zaman da [6, 1, 2, 3, 4, 5] listesini elde etmemiz gerekiyor.

Yazmanızı istediğimiz fonksiyonun adı isPal olmalıdır, tek bir girdi (karakter dizisi) almalı ve eğer girdi palindrom ise ekrana 0, değil ise 1 yazdırmalıdır.
	
def isPal(inStr):
    stack = []
    isPalin = 1
    inStr = inStr.casefold()
    
    for ch in inStr:
        stack.append(ch)

    reverseStr = ''
    while len(stack) > 0:
        reverseStr = reverseStr + stack.pop()
        
    if inStr == reverseStr:
        isPalin = 0

    print(isPalin)
        
            
isPal("eyedipAdanadaPideye")  

Mükemmel Sayı: Eğer pozitif bir tamsayı, kendisi dışında bütün pozitif bölenlerinin toplamına eşit ise o sayıya pozitif tamsayı denilir.

Örnek olarak 28 tamsayısı mükemmel sayıdır, çünkü kendisi dışındaki bölenleri (1, 2, 4, 7, 14) toplamı 28'e eşittir.

Bu soruda sizden istenilen girdi olarak bir tamsayı alan isPer fonksiyonunu yazmanızdır. Eğer girdi mükemmel sayı ise ekrana 0, değil ise 1 yazdırmalısınız. Bunu yaparken kuyruk veri yapısını kullanmanızı istiyoruz. Girdi olarak aldığınız sayının kendisi dışındaki pozitif bölenlerini kuyruk veri yapısının kurallarına uygun bir şekilde Python listesine atıp, en sonunda listenin elemanlarının toplamının girdi olarak aldığınız sayıya eşit olup olmadığını kontrol etmelisiniz:

28 sayısı için kuyruk veri yapısına uyan listeniz sırasıyla [1, 2, 4, 7, 14] elemanlarını içermelidir.

def isPer(num):
    queue = []
    sums = 0
    isper = 1
    
    for n in range(1,1+num//2):
        if num % n == 0:
            queue.append(n)
            sums += n
    if sums == num:
        isper = 0
    print(isper)
    
isPer(496)


Bu sorumuzda dilimleme işlemi yapacağız. Girdileriniz sırasıyla iç içe tanımlanmış 2 boyutlu bir liste, dilimlemenin sol indeksi ve dilimlemenin sağ indeksi. Sizden istenilen sol indeksten, sağ indekse kadar olan (sağ indeks dahil değil) listelerin karşılıklı gelen elemanlarının toplamını ekrana liste olarak yazdırmak.

Örnek :

girdi:  [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 1, 3
çıktı: [11, 13, 15]
açıklama: [4, 5, 6] indeksi 1 olan elemandır, [10, 11, 12] indeksi 3 olan elemandır ve dahil değildir. Aralarında kalan [4, 5, 6] ve [7, 8, 9] listelerinin elemanlarını aynı indeksteki elemanlar toplanarak yeni bir liste oluşturup, ekrana yazdırdığımızda [11, 13, 15] listesi görünür.

Fonksiyon adınız listeDil olmalıdır, ve üç tane girdi alacak şekilde tanımlamalısınız, işlemleriniz bittiğinde ekrana elde ettiğiniz listeyi yazdırmalısınız.


def listeDil(list1, left, right):
    result =[0] * len(list1[left])
    
    for i in range(len(list1[left])):
        for j in range(left, right):
            result[i] += list1[j][i]
    print(result)

listeDil([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 1, 3)


Bu soruda stackOp isminde bir fonksiyon yazacaksınız, fonksiyonunuz girdi olarak bir liste, operasyon karakteri ve bir tamsayı alacak ve aşağıdaki işlemleri yapacaktır:

Eğer operasyon '+' ise, aldığı tamsayıyı listeye yığıt yapısını bozmadan en baştan ekleyecek ve yeni listeyi ekrana bastıracaktır.
Operasyon '-' ise, yığıtın tepesindeki elemanı yığıttan çıkaracak ve kalan listeyi ekrana bastıracaktır.
Operasyon '?' ise, yığıtın tepesindeki elemanı ekrana bastıracaktır.

stackOp([1, 2, 3, 4, 5], '+', 11) çıktı olarak [11, 1, 2, 3, 4, 5] listesini ekrana yazdıracaktır.
stackOp([1, 2, 3, 4, 5], '-', 10) çıktı olarak [2, 3, 4, 5] listesini ekrana yazdıracaktır. (10 sayısının bir önemi yoktur)
stackOp([1, 2, 3, 4, 5], '?', 10) çıktı olarak 1 tamsayısını ekrana yazdıracaktır. (10 sayısının bir önemi yoktur)


def stackOp(list1,opCh, num):
    if opCh == '+':
        list1.insert(0, num)
        print(list1)
    elif opCh == '-':
        del(list1[0])
        print(list1)
    else:
        print(list1[0])
		
		